# 기본 DFS 구현
# 목적 : 탐색하는 순서대로 노드번호 출력
그래프 = [ # DFS가 돌아다닐 지도 역할
  [], # 비워놓을 것!!! → 이유 : 1부터 시작해야해서!!
  [2, 3, 8], # 1번노드와 연결된 노드들 번호 리스트
  [1, 7], # 2번노드와 연결된 노드들 번호 리스트
  [1, 4, 5], # 3번노드와 연결된 노드들 번호 리스트
  [3, 5], # 4번노드와 연결된 노드들 번호 리스트
  [3, 4], # 5번노드와 연결된 노드들 번호 리스트
  [7], # 6번노드와 연결된 노드들 번호 리스트
  [2, 6, 8], # 7번노드와 연결된 노드들 번호 리스트
  [1, 7] # 8번노드와 연결된 노드들 번호 리스트
]
방문했다 = True
방문안함 = False

# 그래프[노드번호] : '노드번호'와 인접한 노드들의 리스트!!
탐색을_시작할_노드번호 = 1
# def dfs(x, y): 2차원 배열일 때
#    visited[x][y] = True
def dfs(탐색할_노드_번호):
    global 노드들_방문여부, 탐색한_노드들

    # 탐색함
    노드들_방문여부[탐색할_노드_번호] = 방문했다
    탐색한_노드들.append(탐색할_노드_번호)

    # 다음에 탐색할 노드 번호를 찾아야 함
    # for dx, dy in [(-1, 0), ()]
    #   nx = x + dx
    #       if inRange(nx, ny) and !visited[nx][ny] and graph[nx][ny] == LAND:
    #           visited[nx][ny] = True
    #           dfs(nx, ny)
    for 다음에_탐색할_노드번호 in 그래프[탐색할_노드_번호]:
        if 노드들_방문여부[다음에_탐색할_노드번호] == 방문안함:
            dfs(다음에_탐색할_노드번호)



탐색한_노드들 = []
노드들_방문여부 = [방문안함] * 9
dfs(탐색을_시작할_노드번호)
print('탐색 순서 :', *탐색한_노드들)